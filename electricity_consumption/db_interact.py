"""This module provides function to interact with Influx DB database
"""

from pathlib import Path
from typing import Optional

import pandas as pd
from influxdb_client import InfluxDBClient, Point, WritePrecision
from influxdb_client.client.write_api import SYNCHRONOUS

from electricity_consumption import logger
from electricity_consumption.constants import INFLUXDB_TOKE, INFLUXDB_URL
from electricity_consumption.paths import PATH_INFLUXDB_MK_FILE
from electricity_consumption.utils import get_variables_from_mk_file

DICT_INFLUXDB = get_variables_from_mk_file(path_mk_file=PATH_INFLUXDB_MK_FILE)


def instantiate_influx_db():
    """Initiates influx db client
    Returns
    -------
    InfluxDBClient
        Influx db client initiated
    """
    return InfluxDBClient(url=INFLUXDB_URL, token=INFLUXDB_TOKE)


def get_df_from_raw_enedis(path_raw_enedis: Path) -> pd.DataFrame:
    """Read a csv generated for enedis and returns a DataFrame

    Parameters
    ----------
    path_raw_enedis : Path
        Path to the enedis csv

    Returns
    -------
    pd.DataFrame
        Pandas DataFrame with enedis sensor value as column
    """
    # Read csv
    df = pd.read_csv(path_raw_enedis, sep=";", encoding="latin-1")

    # Date conversion and index
    df["date"] = df["Date de la mesure"] + " " + df["Heure de la mesure"]
    df.index = pd.to_datetime(df["date"])

    # Define influx db related resources
    df["measurement"] = "electric consumption"
    df["tag"] = "consumption(W)"
    df["subtag"] = "linky sensor"

    # Filter empty values
    df = df[~df["Valeur"].isna()]

    return df[["Valeur", "measurement", "tag", "subtag"]].rename(columns={"Valeur": "value"})


def upload_df_to_influxdb(df: pd.DataFrame):
    """Upload data from pandas Dataframe generated by `get_df_from_raw_enedis`

    Parameters
    ----------
    df : pd.DataFrame
        Dataframe containing measurements to upload
    """
    client = instantiate_influx_db()
    # Create sequence of points
    sequence = [
        Point(row["measurement"])
        .tag("host", row["tag"])
        .field(row["subtag"], row["value"])
        .time(index, WritePrecision.NS)
        for index, row in df.iterrows()
    ]
    write_api = client.write_api(write_options=SYNCHRONOUS)
    write_api.write(DICT_INFLUXDB["DOCKER_INFLUXDB_INIT_BUCKET"], DICT_INFLUXDB["DOCKER_INFLUXDB_INIT_ORG"], sequence)
    # Closing connections
    write_api.__del__()
    client.__del__()
    logger.info("Data upload finished")


def get_df_from_influxdb(
    bucket: Optional[str] = "electric",
    measurement: Optional[str] = "electric consumption",
    distance_minutes: Optional[str] = "43800",
) -> pd.DataFrame:
    """Returns Pandas DataFrame with input measurement from Influxdb

    Parameters
    ----------
    bucket : str, optional
        Name of the bucket to request, by default "electric"
    measurement : str, optional
        Name of measurement to request, by default "electric consumption"
    distance_minutes : str, optional
        Time in minutes to get request from, by default "43800"

    Returns
    -------
    pd.DataFrame
        Pandas DataFrame with input measurement from Influxdb
    """
    query = (
        f'from(bucket: "{bucket}") '
        f"|> range(start:-{distance_minutes}m, stop: now()) "
        f' |> filter(fn: (r) => r._measurement == "{measurement}")'
    )

    client = instantiate_influx_db()
    df = client.query_api().query_data_frame(org=DICT_INFLUXDB["DOCKER_INFLUXDB_INIT_ORG"], query=query)
    client.__del__()
    df.index = pd.to_datetime(df["_time"])
    return df[["_value"]].rename(columns={"_value": measurement})
